{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createBulkData","size","array","i","push","id","name","username","App","nextId","useRef","useState","form","setForm","uselessValue","data","setData","onChange","useCallback","e","target","value","produce","draft","onSubmit","preventDefault","info","current","onRemove","splice","findIndex","placeholder","type","map","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAGA,SAASA,IAEP,IAFoC,IAAdC,EAAa,uDAAN,KACvBC,EAAQ,GACLC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAME,KAAK,CACTC,GAAIF,EACJG,KAAK,GAAD,OAAKH,EAAL,iBACJI,SAAS,GAAD,OAAKJ,EAAL,aAGZ,OAAOD,EAoFMM,MAjFf,WACE,IAAMC,EAASC,iBAAO,MADT,EAEWC,mBAAS,CAAEL,KAAM,GAAIC,SAAU,KAF1C,mBAENK,EAFM,KAEAC,EAFA,OAGWF,mBAAS,CAC/BT,MAAOF,IACPc,aAAc,OALH,mBAGNC,EAHM,KAGAC,EAHA,KAQPC,EAAWC,uBAAY,SAACC,GAAO,IAAD,EACVA,EAAEC,OAAlBd,EAD0B,EAC1BA,KAAMe,EADoB,EACpBA,MAEdR,EACES,aAAQ,SAACC,GACPA,EAAMjB,GAAQe,QAGjB,IACGG,EAAWN,uBACf,SAACC,GACCA,EAAEM,iBACF,IAAMC,EAAO,CACXrB,GAAII,EAAOkB,QACXrB,KAAMM,EAAKN,KACXC,SAAUK,EAAKL,UAGjBS,EACEM,aAAQ,SAACC,GACPA,EAAMrB,MAAME,KAAKsB,OAIrBb,EAAQ,CACNP,KAAM,GACNC,SAAU,KAEZE,EAAOkB,SAAW,IAEpB,CAACf,EAAKN,KAAMM,EAAKL,WAEbqB,EAAWV,uBAAY,SAACb,GAC5BW,EACEM,aAAQ,SAACC,GACPA,EAAMrB,MAAM2B,OACVN,EAAMrB,MAAM4B,WAAU,SAACJ,GAAD,OAAUA,EAAKrB,KAAOA,KAC5C,SAIL,IAEH,OACE,6BACE,0BAAMmB,SAAUA,GACd,2BACElB,KAAK,WACLyB,YAAY,qBACZV,MAAOT,EAAKL,SACZU,SAAUA,IAEZ,2BACEX,KAAK,OACLyB,YAAY,eACZV,MAAOT,EAAKN,KACZW,SAAUA,IAEZ,4BAAQe,KAAK,UAAb,iBAEF,6BACE,4BACGjB,EAAKb,MAAM+B,KAAI,SAACP,GAAD,OACd,wBAAIQ,IAAKR,EAAKrB,GAAI8B,QAAS,kBAAMP,EAASF,EAAKrB,MAC5CqB,EAAKnB,SADR,KACoBmB,EAAKpB,KADzB,YC1EQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e4a34775.chunk.js","sourcesContent":["import React, { useRef, useState, useCallback } from \"react\";\nimport produce from \"immer\";\n\nfunction createBulkData(size = 2500) {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push({\n      id: i,\n      name: `${i} 번째`,\n      username: `${i} 님`,\n    });\n  }\n  return array;\n}\n\nfunction App() {\n  const nextId = useRef(2501);\n  const [form, setForm] = useState({ name: \"\", username: \"\" });\n  const [data, setData] = useState({\n    array: createBulkData(),\n    uselessValue: null,\n  });\n\n  const onChange = useCallback((e) => {\n    const { name, value } = e.target;\n\n    setForm(\n      produce((draft) => {\n        draft[name] = value;\n      })\n    );\n  }, []);\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      const info = {\n        id: nextId.current,\n        name: form.name,\n        username: form.username,\n      };\n\n      setData(\n        produce((draft) => {\n          draft.array.push(info);\n        })\n      );\n\n      setForm({\n        name: \"\",\n        username: \"\",\n      });\n      nextId.current += 1;\n    },\n    [form.name, form.username]\n  );\n  const onRemove = useCallback((id) => {\n    setData(\n      produce((draft) => {\n        draft.array.splice(\n          draft.array.findIndex((info) => info.id === id),\n          1\n        );\n      })\n    );\n  }, []);\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"username\"\n          placeholder=\"아이디\"\n          value={form.username}\n          onChange={onChange}\n        />\n        <input\n          name=\"name\"\n          placeholder=\"이름\"\n          value={form.name}\n          onChange={onChange}\n        />\n        <button type=\"submit\">등록</button>\n      </form>\n      <div>\n        <ul>\n          {data.array.map((info) => (\n            <li key={info.id} onClick={() => onRemove(info.id)}>\n              {info.username} ({info.name})\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}